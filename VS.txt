//html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>To-Do App (API CRUD)</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h1>To-Do App</h1>
    <div class="input-group">
      <input type="text" id="taskInput" placeholder="Enter a task...">
      <button id="addBtn">Add Task</button>
    </div>
    <ul id="taskList"></ul>
  </div>

  <script src="index.js"></script>
</body>
</html>
----------------
//css

body {
  font-family: Arial, sans-serif;
  background-color: #f0f2f5;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 500px;
  margin: 50px auto;
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

h1 {
  text-align: center;
  color: #333;
}

.input-group {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

#taskInput {
  flex: 1;
  padding: 10px;
  font-size: 16px;
}

#addBtn {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
  border-radius: 5px;
}

#taskList {
  list-style: none;
  padding: 0;
}

#taskList li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background: #f8f8f8;
  margin-bottom: 10px;
  border-radius: 5px;
}

.task-text {
  flex: 1;
  cursor: pointer;
}

.edit-btn,
.delete-btn {
  margin-left: 10px;
  padding: 5px 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.edit-btn {
  background-color: #ffc107;
  color: white;
}

.delete-btn {
  background-color: #dc3545;
  color: white;
}
------------------------------------------------------
//js

const taskInput = document.getElementById("taskInput");
const addBtn = document.getElementById("addBtn");
const taskList = document.getElementById("taskList");

// Load tasks on start
window.addEventListener("DOMContentLoaded", fetchTasks);

//  Get tasks
async function fetchTasks() {
  const response = await fetch("https://jsonplaceholder.typicode.com/todos?_limit=5");
  const tasks = await response.json();
  taskList.innerHTML = "";
  tasks.forEach(task => addTaskToDOM(task));
}

//  Add task
addBtn.addEventListener("click", addTask);

async function addTask() {
  const title = taskInput.value.trim();
  if (title === "") return;

  const response = await fetch("https://jsonplaceholder.typicode.com/todos", {
    method: "POST",
    body: JSON.stringify({
      title: title,
      completed: false,
    }),
    headers: {
      "Content-type": "application/json; charset=UTF-8",
    },
  });

  const newTask = await response.json();
  addTaskToDOM(newTask);
  taskInput.value = "";
}

// Add task to DOM with Edit & Delete
function addTaskToDOM(task) {
  const li = document.createElement("li");
  li.innerHTML = `
    <span class="task-text" style="text-decoration: ${task.completed ? 'line-through' : 'none'}">
      ${task.title}
    </span>
    <button class="edit-btn">Edit</button>
    <button class="delete-btn">Delete</button>
  `;

  //  Delete
  li.querySelector(".delete-btn").addEventListener("click", async () => {
    await fetch(`https://jsonplaceholder.typicode.com/todos/${task.id}`, {
      method: "DELETE",
    });
    li.remove();
  });

  //  Edit
  li.querySelector(".edit-btn").addEventListener("click", async () => {
    const newTitle = prompt("Edit task:", task.title);
    if (newTitle && newTitle.trim() !== "") {
      task.title = newTitle.trim();
      await fetch(`https://jsonplaceholder.typicode.com/todos/${task.id}`, {
        method: "PUT",
        body: JSON.stringify(task),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
      });
      li.querySelector(".task-text").textContent = task.title;
    }
  });

  
  li.querySelector(".task-text").addEventListener("click", async () => {
    task.completed = !task.completed;
    li.querySelector(".task-text").style.textDecoration = task.completed ? "line-through" : "none";

    await fetch(`https://jsonplaceholder.typicode.com/todos/${task.id}`, {
      method: "PUT",
      body: JSON.stringify(task),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
  });

  taskList.appendChild(li);
}

